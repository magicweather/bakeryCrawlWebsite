---

---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="generator" content={Astro.generator} />
		<title>Bakery Crawl</title>
		<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Sacramento&display=swap" rel="stylesheet">
		<style>
			body {
				margin: 0;
				padding: 0;
				font-family: Arial, sans-serif;
			}

			/* Simple scrollable content */
			.scroll-content {
				height: 250vh; /* Increased height to ensure 0% and 100% can be reached */
				width: 100%;
				position: relative;
			}

			html {
				overflow-x: hidden;
			}

			.mobile {
				background-color: #e0e0e0;
			}

			.desktop {
				background-color: black;
				color: white;
				text-align: center;
				display: flex;
				justify-content: center;
				align-items: center;
			}

			.desktop-message {
				font-size: 24px;
			}

			#map {
				height: calc(100vh - 62px);
				width: calc(100% - 8px);
				position: fixed;
				top: 30px;
				left: 4px;
			}

			.map-overlay {
				position: fixed;
				top: 30px;
				left: 4px;
				width: calc(100% - 8px);
				height: calc(100vh - 62px);
				background-color: rgba(0, 0, 0, 0.4);
				z-index: 500;
				transition: opacity 0.3s ease;
			}

			.windows-frame {
				position: fixed;
				top: 0;
				left: 0;
				right: 0;
				bottom: 0;
				pointer-events: none;
				z-index: 2000;
			}

			.window-border {
				position: absolute;
				background: #e0e0e0;
				border-top: 2px solid #ffffff;
				border-left: 2px solid #ffffff;
				border-right: 2px solid #a0a0a0;
				border-bottom: 2px solid #a0a0a0;
			}

			.window-border.top {
				top: 0;
				left: 0;
				width: 100%;
				height: 30px;
			}

			.window-border.left {
				top: 30px;
				left: 0;
				width: 4px;
				height: calc(100vh - 62px);
			}

			.window-border.right {
				top: 30px;
				right: 0;
				width: 4px;
				height: calc(100vh - 62px);
			}

			.window-border.bottom {
				position: fixed;
				bottom: -1px;
				left: 0;
				width: 100vw;
				height: 42px;
				z-index: 2001;
			}

			.window-title-bar {
				position: absolute;
				top: 2px;
				left: 2px;
				width: calc(100% - 4px);
				height: 26px;
				background: #848484;
				color: white;
				font-family: 'MS Sans Serif', sans-serif;
				font-size: 11px;
				font-weight: normal;
				display: flex;
				align-items: center;
				padding: 0 8px;
				box-sizing: border-box;
			}

			.window-controls {
				margin-left: auto;
				display: flex;
				gap: 2px;
			}

			.window-button {
				width: 16px;
				height: 14px;
				background: #e0e0e0;
				border-top: 1px solid #ffffff;
				border-left: 1px solid #ffffff;
				border-right: 1px solid #a0a0a0;
				border-bottom: 1px solid #a0a0a0;
				font-size: 8px;
				display: flex;
				align-items: center;
				justify-content: center;
				color: black;
				font-weight: bold;
				font-family: 'MS Sans Serif', sans-serif;
			}

			.window-status-bar {
				position: fixed;
				bottom: 8px;
				left: 2px;
				width: calc(100vw - 4px);
				height: 32px;
				background: #e0e0e0;
				border-top: 1px solid #a0a0a0;
				border-left: 1px solid #a0a0a0;
				border-right: 1px solid #ffffff;
				border-bottom: 1px solid #ffffff;
				font-family: 'MS Sans Serif', sans-serif;
				font-size: 11px;
				font-weight: normal;
				display: flex;
				align-items: center;
				padding: 0 6px;
				color: #000000;
				box-sizing: border-box;
				z-index: 2002;
				gap: 10px;
			}

			.progress-container {
				flex: 1;
				height: 18px;
				background: #c0c0c0;
				border-top: 1px solid #808080;
				border-left: 1px solid #808080;
				border-right: 1px solid #dfdfdf;
				border-bottom: 1px solid #dfdfdf;
				padding: 2px;
				box-sizing: border-box;
				position: relative;
				display: flex;
				align-items: center;
				justify-content: center;
			}

			.progress-blocks {
				position: absolute;
				left: 2px;
				top: 2px;
				height: calc(100% - 4px);
				width: calc(100% - 4px);
				display: flex;
				gap: 1px;
			}

			.progress-block {
				flex: 1;
				height: 100%;
				background: #c0c0c0;
				transition: background-color 0.1s ease;
			}

			.progress-block.filled {
				background: #4a90e2;
			}

			.progress-text {
				font-family: 'MS Sans Serif', sans-serif;
				font-size: 9px;
				font-weight: bold;
				color: #000000;
				text-shadow: 1px 1px 0px rgba(255,255,255,0.5);
				position: relative;
				z-index: 1;
			}

			/* Fullscreen Dialog Styles */
			.fullscreen-dialog-overlay {
				position: fixed;
				top: 0;
				left: 0;
				width: 100vw;
				height: 100vh;
				background: rgba(0, 0, 0, 0.5);
				display: none;
				align-items: center;
				justify-content: center;
				z-index: 9999;
			}

			.fullscreen-dialog {
				width: 400px;
				background: #c0c0c0;
				border-top: 2px solid #ffffff;
				border-left: 2px solid #ffffff;
				border-right: 2px solid #808080;
				border-bottom: 2px solid #808080;
				font-family: 'MS Sans Serif', sans-serif;
				box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
			}

			.dialog-title-bar {
				background: #000080;
				color: white;
				height: 20px;
				display: flex;
				align-items: center;
				justify-content: space-between;
				padding: 2px 4px;
				font-size: 11px;
				font-weight: bold;
			}

			.dialog-controls {
				display: flex;
			}

			.dialog-button {
				width: 16px;
				height: 14px;
				background: #c0c0c0;
				border-top: 1px solid #ffffff;
				border-left: 1px solid #ffffff;
				border-right: 1px solid #808080;
				border-bottom: 1px solid #808080;
				display: flex;
				align-items: center;
				justify-content: center;
				font-size: 8px;
				color: black;
				cursor: pointer;
				font-weight: bold;
			}

			.dialog-button:active {
				border-top: 1px solid #808080;
				border-left: 1px solid #808080;
				border-right: 1px solid #ffffff;
				border-bottom: 1px solid #ffffff;
			}

			.dialog-content {
				padding: 16px;
				display: flex;
				gap: 16px;
				align-items: flex-start;
			}

			.dialog-icon {
				flex-shrink: 0;
			}

			.monitor-icon {
				width: 32px;
				height: 32px;
				position: relative;
			}

			.monitor-icon .screen {
				width: 28px;
				height: 20px;
				background: #008080;
				border: 2px solid #404040;
				border-radius: 2px;
			}

			.monitor-icon .base {
				width: 20px;
				height: 6px;
				background: #808080;
				margin: 2px auto 0;
				border-radius: 0 0 4px 4px;
			}

			.croissant-icon {
				width: 32px;
				height: 32px;
				position: relative;
				display: flex;
				align-items: center;
				justify-content: center;
			}

			.croissant-icon .croissant-emoji {
				font-size: 24px;
				line-height: 1;
			}

			.dialog-text {
				flex: 1;
				font-size: 11px;
				line-height: 1.4;
				color: #000000;
				margin-top: 4px;
			}

			.dialog-buttons {
				display: flex;
				gap: 8px;
				justify-content: flex-end;
				margin-top: 20px;
			}

			.dialog-btn {
				min-width: 80px;
				height: 24px;
				background: #c0c0c0;
				border-top: 1px solid #ffffff;
				border-left: 1px solid #ffffff;
				border-right: 1px solid #808080;
				border-bottom: 1px solid #808080;
				font-family: 'MS Sans Serif', sans-serif;
				font-size: 11px;
				color: #000000;
				cursor: pointer;
				padding: 0 8px;
			}

			.dialog-btn:active {
				border-top: 1px solid #808080;
				border-left: 1px solid #808080;
				border-right: 1px solid #ffffff;
				border-bottom: 1px solid #ffffff;
			}

			.dialog-btn.primary {
				font-weight: bold;
				border: 2px solid #000000;
				background: #c0c0c0;
			}

			.dialog-buttons-vertical {
				display: flex;
				flex-direction: column;
				gap: 8px;
				padding: 16px;
				padding-top: 0;
				align-items: center;
			}

			.dialog-btn.full-width {
				width: 220px;
				justify-content: center;
				text-align: center;
			}

			/* Hide default Leaflet attribution */
			.leaflet-control-attribution {
				display: none !important;
			}
			
			/* Custom attribution overlay */
			#custom-attribution {
				position: fixed;
				bottom: 50px;
				right: 12px;
				z-index: 9999;
				background: rgba(255, 255, 255, 0.95);
				color: #000000;
				font-family: 'MS Sans Serif', sans-serif;
				font-size: 10px;
				border: 1px solid #808080;
				padding: 3px 6px;
				pointer-events: auto;
			}
			
			#custom-attribution a {
				color: #0000EE;
				text-decoration: underline;
			}
			
			#custom-attribution a:visited {
				color: #551A8B;
			}

			/* Custom Bakery Markers - 3D Popup Style */
			.custom-div-icon {
				z-index: 9999 !important; /* Way above Hackney boundary (1001) and window elements */
			}

			:global(.bakery-marker) {
				background: #4A90E2 !important;
				border: 2px solid #ffffff !important;
				width: 32px !important;
				height: 32px !important;
				border-radius: 50% !important;
				display: flex !important;
				align-items: center !important;
				justify-content: center !important;
				font-size: 16px !important;
				font-weight: bold !important;
				color: white !important;
				cursor: pointer !important;
				box-shadow: 0 3px 10px rgba(0,0,0,0.4) !important;
				transition: all 0.2s ease !important;
				position: relative !important;
				z-index: 2001 !important;
			}
			
			:global(.bakery-marker::after) {
				content: '' !important;
				position: absolute !important;
				top: 100% !important;
				left: 50% !important;
				width: 0 !important;
				height: 0 !important;
				border-left: 8px solid transparent !important;
				border-right: 8px solid transparent !important;
				border-top: 12px solid #4A90E2 !important;
				transform: translateX(-50%) !important;
				z-index: 2000 !important;
			}
			
			:global(.bakery-marker::before) {
				content: '' !important;
				position: absolute !important;
				top: 100% !important;
				left: 50% !important;
				width: 0 !important;
				height: 0 !important;
				border-left: 10px solid transparent !important;
				border-right: 10px solid transparent !important;
				border-top: 14px solid #ffffff !important;
				transform: translateX(-50%) !important;
				z-index: 1999 !important;
			}

			:global(.bakery-marker .marker-number) {
				font-family: 'Arial', sans-serif !important;
				line-height: 1 !important;
				transform: none !important;
			}

			:global(.bakery-marker:hover) {
				transform: scale(1.2) !important;
				box-shadow: 0 5px 15px rgba(0,0,0,0.5) !important;
				z-index: 2002 !important;
			}

			:global(.bakery-marker:active) {
				transform: scale(1.1) !important;
			}


			/* Disable scrolling during popup sequence */
			.scroll-disabled {
				overflow: hidden !important;
				position: fixed !important;
				width: 100% !important;
				height: 100% !important;
			}
		</style>
	</head>
	<body>
		<!-- Fullscreen Dialog Popup -->
		<div id="fullscreen-dialog" class="fullscreen-dialog-overlay">
			<div class="fullscreen-dialog">
				<div class="dialog-title-bar">
					<span>Bakery Crawl - Fullscreen Experience</span>
					<div class="dialog-controls">
						<div class="dialog-button close-btn">×</div>
					</div>
				</div>
				<div class="dialog-content">
					<div class="dialog-icon">
						<div class="monitor-icon">
							<div class="screen"></div>
							<div class="base"></div>
						</div>
					</div>
					<div class="dialog-text">
						This is a fullscreen experience.<br>
						Click "Enter Fullscreen" for the best viewing experience.
					</div>
					<div class="dialog-buttons">
						<button id="enter-fullscreen-btn" class="dialog-btn primary">Enter Fullscreen</button>
						<button id="skip-fullscreen-btn" class="dialog-btn">Skip</button>
					</div>
				</div>
			</div>
		</div>

		<!-- Welcome Dialog Popup -->
		<div id="welcome-dialog" class="fullscreen-dialog-overlay">
			<div class="fullscreen-dialog">
				<div class="dialog-title-bar">
					<span>Welcome to Bakery Crawl</span>
					<div class="dialog-controls">
						<div class="dialog-button welcome-close-btn">×</div>
					</div>
				</div>
				<div class="dialog-content">
					<div class="dialog-icon">
						<div class="croissant-icon">
							<div class="croissant-emoji">🥐</div>
						</div>
					</div>
					<div class="dialog-text">
						Welcome to Bakery Crawl: Hackney Version<br>
						Explore London's finest bakeries through this interactive journey.
					</div>
				</div>
				<div class="dialog-buttons-vertical">
					<button id="start-journey-btn" class="dialog-btn primary full-width">Start Journey, Scroll Around 😊</button>
					<button id="move-recommendations-btn" class="dialog-btn full-width">Move to Recommendations</button>
				</div>
			</div>
		</div>

		<div id="desktop-message" class="desktop-message" style="display: none;">
			Please open the website on your mobile phone
		</div>

		<div id="mobile-content" style="display: none;">
			<div class="windows-frame">
				<div class="window-border top">
					<div class="window-title-bar">
						<span>Bakery Crawl - Internet Explorer</span>
						<div class="window-controls">
							<div class="window-button">_</div>
							<div class="window-button">□</div>
							<div class="window-button">×</div>
						</div>
					</div>
				</div>
				<div class="window-border left"></div>
				<div class="window-border right"></div>
				<div class="window-border bottom">
					<div class="window-status-bar">
						<span>Ready</span>
						<div class="progress-container">
							<div class="progress-blocks">
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
							</div>
							<div class="progress-text" id="progress-text">0%</div>
						</div>
					</div>
				</div>
			</div>
			
			<div id="map"></div>
			<div class="map-overlay"></div>
			<div class="scroll-content"></div>
			
			<!-- Custom attribution overlay -->
			<div id="custom-attribution">
				<a href="https://leafletjs.com" target="_blank">Leaflet</a> | © <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> contributors
			</div>
		</div>

		<script>
			// Dialog Functions
			function showFullscreenDialog() {
				const dialog = document.getElementById('fullscreen-dialog');
				dialog.style.display = 'flex';
			}

			function hideFullscreenDialog() {
				const dialog = document.getElementById('fullscreen-dialog');
				dialog.style.display = 'none';
			}

			function showWelcomeDialog() {
				const dialog = document.getElementById('welcome-dialog');
				dialog.style.display = 'flex';
			}

			function hideWelcomeDialog() {
				const dialog = document.getElementById('welcome-dialog');
				dialog.style.display = 'none';
			}

			function disableScrolling() {
				document.body.classList.add('scroll-disabled');
			}

			function enableScrolling() {
				document.body.classList.remove('scroll-disabled');
			}

			function requestFullscreen() {
				const elem = document.documentElement;
				if (elem.requestFullscreen) {
					elem.requestFullscreen();
				} else if (elem.mozRequestFullScreen) {
					elem.mozRequestFullScreen();
				} else if (elem.webkitRequestFullscreen) {
					elem.webkitRequestFullscreen();
				} else if (elem.msRequestFullscreen) {
					elem.msRequestFullscreen();
				}
			}

			function setupFullscreenDialog() {
				const enterBtn = document.getElementById('enter-fullscreen-btn');
				const skipBtn = document.getElementById('skip-fullscreen-btn');
				const closeBtn = document.querySelector('.close-btn');

				enterBtn.addEventListener('click', () => {
					requestFullscreen();
					hideFullscreenDialog();
					// Show welcome dialog after fullscreen
					setTimeout(showWelcomeDialog, 300);
				});

				skipBtn.addEventListener('click', () => {
					hideFullscreenDialog();
					// Show welcome dialog after skipping fullscreen
					setTimeout(showWelcomeDialog, 300);
				});

				closeBtn.addEventListener('click', () => {
					hideFullscreenDialog();
					// Show welcome dialog after closing fullscreen
					setTimeout(showWelcomeDialog, 300);
				});

				// Show dialog when page loads and disable scrolling
				setTimeout(() => {
					disableScrolling(); // Disable scrolling when dialogs start
					showFullscreenDialog();
				}, 500);
			}

			function setupWelcomeDialog() {
				const startBtn = document.getElementById('start-journey-btn');
				const recommendationsBtn = document.getElementById('move-recommendations-btn');
				const closeBtn = document.querySelector('.welcome-close-btn');

				startBtn.addEventListener('click', () => {
					hideWelcomeDialog();
					enableScrolling(); // Re-enable scrolling when welcome dialog closes
				});

				recommendationsBtn.addEventListener('click', () => {
					hideWelcomeDialog();
					enableScrolling(); // Re-enable scrolling when welcome dialog closes
					// TODO: Future implementation - redirect to recommendations website
					console.log('Move to Recommendations clicked - will redirect to recommendations site in future');
				});

				closeBtn.addEventListener('click', () => {
					hideWelcomeDialog();
					enableScrolling(); // Re-enable scrolling when welcome dialog closes
				});
			}

			function isMobile() {
				return window.innerWidth <= 768;
			}

			function initializeApp() {
				if (isMobile()) {
					// Setup dialogs only on mobile
					setupFullscreenDialog();
					setupWelcomeDialog();
					document.body.className = 'mobile';
					document.getElementById('mobile-content').style.display = 'block';
					
					// Initialize Leaflet map (non-interactive)
					var map = L.map('map', {
						dragging: false,
						touchZoom: false,
						scrollWheelZoom: false,
						doubleClickZoom: false,
						boxZoom: false,
						keyboard: false,
						zoomControl: false,
						attributionControl: false  // Disable built-in attribution completely
					}).setView([51.5074, -0.1278], 12);
					
					L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
						attribution: '',  // Remove attribution since we have custom one
						keepBuffer: 20, // Keep many more tiles in memory
						maxNativeZoom: 18,
						maxZoom: 18,
						updateWhenIdle: false, // Update tiles during animation
						updateWhenZooming: true, // Keep updating while zooming
						updateInterval: 100, // Even faster tile updates
						bounds: [[51.40, -0.25], [51.65, 0.05]], // Preload entire area from south London to north Hackney
						minZoom: 11,
						zIndex: 1
					}).addTo(map);
					
					// Create a high z-index pane for Hackney boundary
					map.createPane('hackneyPane');
					map.getPane('hackneyPane').style.zIndex = 1001;
					
					// Create an even higher z-index pane for bakery markers
					map.createPane('bakeryPane');
					map.getPane('bakeryPane').style.zIndex = 2000;
					
					// Preload tiles silently in background
					function preloadScrollPath() {
						console.log('Preloading map tiles for scroll path...');
						
						// Create invisible temporary map for preloading
						const tempMapDiv = document.createElement('div');
						tempMapDiv.style.width = '1px';
						tempMapDiv.style.height = '1px';
						tempMapDiv.style.position = 'absolute';
						tempMapDiv.style.left = '-9999px';
						tempMapDiv.style.opacity = '0';
						document.body.appendChild(tempMapDiv);
						
						const tempMap = L.map(tempMapDiv, {
							zoomControl: false,
							attributionControl: false
						});
						
						const tempTileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
							keepBuffer: 20,
							updateWhenIdle: false,
							updateWhenZooming: true,
							updateInterval: 100
						}).addTo(tempMap);
						
						// Define key points along the scroll path
						const pathPoints = [
							{ lat: 51.5074, lng: -0.1278, zoom: 12 }, // Start: Central London
							{ lat: 51.5200, lng: -0.1000, zoom: 12.3 }, // 25% progress
							{ lat: 51.5300, lng: -0.0800, zoom: 12.6 }, // 50% progress
							{ lat: 51.5375, lng: -0.0650, zoom: 12.8 }, // 75% progress
							{ lat: 51.5420, lng: -0.0650, zoom: 12.8 } // End: Perfect Hackney view
						];
						
						// Preload tiles for each point using temp map
						pathPoints.forEach((point, index) => {
							setTimeout(() => {
								tempMap.setView([point.lat, point.lng], point.zoom);
								console.log(`Preloaded tiles for point ${index + 1}/5`);
							}, index * 300);
						});
						
						// Clean up temp map after preloading
						setTimeout(() => {
							tempMap.remove();
							document.body.removeChild(tempMapDiv);
							console.log('Preloading complete, temp map cleaned up');
						}, pathPoints.length * 300 + 1000);
					}
					
					// Start preloading immediately when website loads
					setTimeout(preloadScrollPath, 500);

					// Load and add Hackney boundary
					window.hackneyLayer = null;
					fetch('/hackney-boundary.json')
						.then(response => response.json())
						.then(data => {
							console.log('Loading Hackney boundary with', data.geometry.coordinates[0].length, 'points');
							window.hackneyLayer = L.geoJSON(data, {
								pane: 'hackneyPane',
								style: {
									color: '#98D8C8',
									fillColor: '#98D8C8',
									weight: 2,
									opacity: 0.9,
									fillOpacity: 0.6
								}
							}).addTo(map);
							console.log('Hackney boundary layer created');
						})
						.catch(error => console.error('Could not load Hackney boundary:', error));

					// Add large numbered bakery markers - spread across Hackney borough
					const bakeries = [
						{ name: "Sweet Dreams Bakery", lat: 51.5500, lng: -0.0550, number: 1 }, // North Hackney
						{ name: "Croissant Corner", lat: 51.5350, lng: -0.0750, number: 2 }, // South West
						{ name: "Artisan Bread Co.", lat: 51.5480, lng: -0.0420, number: 3 }, // East Hackney
						{ name: "Cake Dreams", lat: 51.5380, lng: -0.0580, number: 4 }, // Central South
						{ name: "The French Bakery", lat: 51.5520, lng: -0.0680, number: 5 }, // North West
						{ name: "Morning Glory Bakery", lat: 51.5320, lng: -0.0480, number: 6 }, // South East
						{ name: "Hackney Sourdough", lat: 51.5460, lng: -0.0620, number: 7 }, // Central
						{ name: "Sugar & Spice", lat: 51.5400, lng: -0.0450, number: 8 } // East Central
					];

					function createBakeryMarker(bakery) {
						const icon = L.divIcon({
							html: `<div class="bakery-marker" data-name="${bakery.name}"><span class="marker-number">${bakery.number}</span></div>`,
							className: 'custom-div-icon',
							iconSize: [32, 44], // Circular top + triangle pointer (width, total height)
							iconAnchor: [16, 44], // Center horizontally, anchor at bottom of pointer
							popupAnchor: [0, -44]
						});

						const marker = L.marker([bakery.lat, bakery.lng], { 
							icon: icon,
							pane: 'bakeryPane', // Use custom high z-index pane
							zIndexOffset: 1000 // Additional offset within the pane
						}).addTo(map);
						
						marker.on('click', function(e) {
							console.log(`Clicked on ${bakery.name} (#${bakery.number})`);
							// TODO: Add popup or detailed view for bakery
							alert(`${bakery.number}. ${bakery.name}! 🥧`);
							e.originalEvent.stopPropagation(); // Prevent map click
						});

						return marker;
					}

					// Create all bakery markers
					bakeries.forEach(bakery => createBakeryMarker(bakery));
					
					// Scroll-based map transition using normal window scrolling
					let isTransitioning = false;
					
					window.addEventListener('scroll', function() {
						if (isTransitioning) return; // Prevent overlapping transitions
						
						const scrollY = window.pageYOffset || document.documentElement.scrollTop;
						const maxScroll = Math.max(1, document.documentElement.scrollHeight - window.innerHeight);
						let scrollProgress = Math.min(scrollY / maxScroll, 1);
						
						// Smooth snap to 0% and 100% with wider zones
						if (scrollProgress < 0.10) {
							scrollProgress = 0;
						} else if (scrollProgress > 0.90) {
							scrollProgress = 1;
						}
						
						// Debug logging for scroll values
						console.log('Scroll Debug:', {
							scrollY: scrollY.toFixed(0),
							maxScroll: maxScroll.toFixed(0),
							rawProgress: ((scrollY / maxScroll) * 100).toFixed(1) + '%',
							adjustedProgress: (scrollProgress * 100).toFixed(1) + '%',
							blockPercent: Math.floor((scrollProgress * 100) / 5) * 5 + '%'
						});
						
						// Start: Central London coordinates: [51.5074, -0.1278], zoom 12
						// End: Perfect Hackney view coordinates: [51.5420, -0.0650], zoom 12.8
						const startLat = 51.5074;
						const startLng = -0.1278;
						const startZoom = 12;
						
						const endLat = 51.5420;  // Perfect Hackney view latitude
						const endLng = -0.0650;  // Perfect Hackney view longitude
						const endZoom = 12.8;
						
						// Interpolate coordinates and zoom
						const currentLat = startLat + (endLat - startLat) * scrollProgress;
						const currentLng = startLng + (endLng - startLng) * scrollProgress;
						const currentZoom = startZoom + (endZoom - startZoom) * scrollProgress;
						
						// Use flyTo for smoother transitions
						isTransitioning = true;
						map.flyTo([currentLat, currentLng], currentZoom, {
							duration: 0.05, // Even shorter duration for responsiveness
							easeLinearity: 0.9 // More linear easing
						});
						
						// Reduce Hackney boundary opacity as we scroll down
						if (window.hackneyLayer) {
							// Start with high opacity (0.9/0.6) and decrease as we scroll
							const boundaryOpacity = Math.max(0.6, 0.9 - (scrollProgress * 0.3)); // Border: 0.9 -> 0.6
							const boundaryFillOpacity = Math.max(0.4, 0.6 - (scrollProgress * 0.2)); // Fill: 0.6 -> 0.4
							
							window.hackneyLayer.setStyle({
								color: '#98D8C8',
								fillColor: '#98D8C8',
								weight: 2,
								opacity: boundaryOpacity,
								fillOpacity: boundaryFillOpacity
							});
						}
						
						// Update progress blocks in 5% increments with centered percentage text
						const progressBlocks = document.querySelectorAll('.progress-block');
						const progressText = document.getElementById('progress-text');
						if (progressBlocks.length > 0 && progressText) {
							// Round to nearest 5% increment
							const rawPercentage = scrollProgress * 100;
							const blockPercentage = Math.floor(rawPercentage / 5) * 5;
							
							// Calculate how many blocks to fill (each block represents 5%)
							const blocksToFill = blockPercentage / 5;
							
							// Update blocks
							progressBlocks.forEach((block, index) => {
								if (index < blocksToFill) {
									block.classList.add('filled');
								} else {
									block.classList.remove('filled');
								}
							});
							
							progressText.textContent = `${blockPercentage}%`;
						}
						
						// Fade out original overlay
						const originalOverlay = document.querySelector('.map-overlay');
						
						if (originalOverlay) {
							// Fade out original overlay as we scroll (disappears by 50% scroll)
							originalOverlay.style.opacity = Math.max(0, 1 - (scrollProgress * 2));
						}
						
						// Reset transition flag
						setTimeout(() => {
							isTransitioning = false;
						}, 50);
					});
					
				} else {
					document.body.className = 'desktop';
					document.getElementById('desktop-message').style.display = 'block';
				}
			}

			// Load Leaflet script dynamically
			const script = document.createElement('script');
			script.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
			script.integrity = 'sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=';
			script.crossOrigin = '';
			script.onload = initializeApp;
			document.head.appendChild(script);
		</script>
	</body>
</html>
