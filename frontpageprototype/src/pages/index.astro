---

---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="generator" content={Astro.generator} />
		<title>Bakery Crawl</title>
		<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Sacramento&display=swap" rel="stylesheet">
		<style>
			body {
				margin: 0;
				padding: 0;
				font-family: Arial, sans-serif;
			}

			/* Simple scrollable content */
			.scroll-content {
				height: 200vh; /* Much taller to create proper scroll area */
				width: 100%;
				position: relative;
			}

			html {
				overflow-x: hidden;
			}

			.mobile {
				background-color: #e0e0e0;
			}

			.desktop {
				background-color: black;
				color: white;
				text-align: center;
				display: flex;
				justify-content: center;
				align-items: center;
			}

			.desktop-message {
				font-size: 24px;
			}

			#map {
				height: calc(100vh - 62px);
				width: calc(100% - 8px);
				position: fixed;
				top: 30px;
				left: 4px;
			}

			.map-overlay {
				position: fixed;
				top: 30px;
				left: 4px;
				width: calc(100% - 8px);
				height: calc(100vh - 62px);
				background-color: rgba(0, 0, 0, 0.4);
				z-index: 500;
				transition: opacity 0.3s ease;
			}

			.windows-frame {
				position: fixed;
				top: 0;
				left: 0;
				right: 0;
				bottom: 0;
				pointer-events: none;
				z-index: 2000;
			}

			.window-border {
				position: absolute;
				background: #e0e0e0;
				border-top: 2px solid #ffffff;
				border-left: 2px solid #ffffff;
				border-right: 2px solid #a0a0a0;
				border-bottom: 2px solid #a0a0a0;
			}

			.window-border.top {
				top: 0;
				left: 0;
				width: 100%;
				height: 30px;
			}

			.window-border.left {
				top: 30px;
				left: 0;
				width: 4px;
				height: calc(100vh - 62px);
			}

			.window-border.right {
				top: 30px;
				right: 0;
				width: 4px;
				height: calc(100vh - 62px);
			}

			.window-border.bottom {
				position: fixed;
				bottom: -1px;
				left: 0;
				width: 100vw;
				height: 42px;
				z-index: 2001;
			}

			.window-title-bar {
				position: absolute;
				top: 2px;
				left: 2px;
				width: calc(100% - 4px);
				height: 26px;
				background: #848484;
				color: white;
				font-family: 'MS Sans Serif', sans-serif;
				font-size: 11px;
				font-weight: normal;
				display: flex;
				align-items: center;
				padding: 0 8px;
				box-sizing: border-box;
			}

			.window-controls {
				margin-left: auto;
				display: flex;
				gap: 2px;
			}

			.window-button {
				width: 16px;
				height: 14px;
				background: #e0e0e0;
				border-top: 1px solid #ffffff;
				border-left: 1px solid #ffffff;
				border-right: 1px solid #a0a0a0;
				border-bottom: 1px solid #a0a0a0;
				font-size: 8px;
				display: flex;
				align-items: center;
				justify-content: center;
				color: black;
				font-weight: bold;
				font-family: 'MS Sans Serif', sans-serif;
			}

			.window-status-bar {
				position: fixed;
				bottom: 8px;
				left: 2px;
				width: calc(100vw - 4px);
				height: 32px;
				background: #e0e0e0;
				border-top: 1px solid #a0a0a0;
				border-left: 1px solid #a0a0a0;
				border-right: 1px solid #ffffff;
				border-bottom: 1px solid #ffffff;
				font-family: 'MS Sans Serif', sans-serif;
				font-size: 11px;
				font-weight: normal;
				display: flex;
				align-items: center;
				padding: 0 6px;
				color: #000000;
				box-sizing: border-box;
				z-index: 2002;
				gap: 10px;
			}

			.progress-container {
				flex: 1;
				height: 18px;
				background: #c0c0c0;
				border-top: 1px solid #808080;
				border-left: 1px solid #808080;
				border-right: 1px solid #dfdfdf;
				border-bottom: 1px solid #dfdfdf;
				padding: 2px;
				box-sizing: border-box;
				position: relative;
				display: flex;
				align-items: center;
				justify-content: center;
			}

			.progress-blocks {
				position: absolute;
				left: 2px;
				top: 2px;
				height: calc(100% - 4px);
				width: calc(100% - 4px);
				display: flex;
				gap: 1px;
			}

			.progress-block {
				flex: 1;
				height: 100%;
				background: #c0c0c0;
				transition: background-color 0.1s ease;
			}

			.progress-block.filled {
				background: #4a90e2;
			}

			.progress-text {
				font-family: 'MS Sans Serif', sans-serif;
				font-size: 9px;
				font-weight: bold;
				color: #000000;
				text-shadow: 1px 1px 0px rgba(255,255,255,0.5);
				position: relative;
				z-index: 1;
			}
		</style>
	</head>
	<body>
		<div id="desktop-message" class="desktop-message" style="display: none;">
			Please open the website on your mobile phone
		</div>

		<div id="mobile-content" style="display: none;">
			<div class="windows-frame">
				<div class="window-border top">
					<div class="window-title-bar">
						<span>Bakery Crawl - Internet Explorer</span>
						<div class="window-controls">
							<div class="window-button">_</div>
							<div class="window-button">□</div>
							<div class="window-button">×</div>
						</div>
					</div>
				</div>
				<div class="window-border left"></div>
				<div class="window-border right"></div>
				<div class="window-border bottom">
					<div class="window-status-bar">
						<span>Ready</span>
						<div class="progress-container">
							<div class="progress-blocks">
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
								<div class="progress-block"></div>
							</div>
							<div class="progress-text" id="progress-text">0%</div>
						</div>
					</div>
				</div>
			</div>
			
			<div id="map"></div>
			<div class="map-overlay"></div>
			<div class="scroll-content"></div>
		</div>

		<script>
			function isMobile() {
				return window.innerWidth <= 768;
			}

			function initializeApp() {
				if (isMobile()) {
					document.body.className = 'mobile';
					document.getElementById('mobile-content').style.display = 'block';
					
					// Initialize Leaflet map (non-interactive)
					var map = L.map('map', {
						dragging: false,
						touchZoom: false,
						scrollWheelZoom: false,
						doubleClickZoom: false,
						boxZoom: false,
						keyboard: false,
						zoomControl: false
					}).setView([51.5074, -0.1278], 12);
					
					L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
						attribution: '© OpenStreetMap contributors',
						keepBuffer: 20, // Keep many more tiles in memory
						maxNativeZoom: 18,
						maxZoom: 18,
						updateWhenIdle: false, // Update tiles during animation
						updateWhenZooming: true, // Keep updating while zooming
						updateInterval: 100, // Even faster tile updates
						bounds: [[51.40, -0.25], [51.65, 0.05]], // Preload entire area from south London to north Hackney
						minZoom: 11,
						zIndex: 1
					}).addTo(map);
					
					// Create a high z-index pane for Hackney boundary
					map.createPane('hackneyPane');
					map.getPane('hackneyPane').style.zIndex = 1001;
					
					// Preload tiles silently in background
					function preloadScrollPath() {
						console.log('Preloading map tiles for scroll path...');
						
						// Create invisible temporary map for preloading
						const tempMapDiv = document.createElement('div');
						tempMapDiv.style.width = '1px';
						tempMapDiv.style.height = '1px';
						tempMapDiv.style.position = 'absolute';
						tempMapDiv.style.left = '-9999px';
						tempMapDiv.style.opacity = '0';
						document.body.appendChild(tempMapDiv);
						
						const tempMap = L.map(tempMapDiv, {
							zoomControl: false,
							attributionControl: false
						});
						
						const tempTileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
							keepBuffer: 20,
							updateWhenIdle: false,
							updateWhenZooming: true,
							updateInterval: 100
						}).addTo(tempMap);
						
						// Define key points along the scroll path
						const pathPoints = [
							{ lat: 51.5074, lng: -0.1278, zoom: 12 }, // Start: Central London
							{ lat: 51.5200, lng: -0.1000, zoom: 12.3 }, // 25% progress
							{ lat: 51.5300, lng: -0.0800, zoom: 12.6 }, // 50% progress
							{ lat: 51.5375, lng: -0.0650, zoom: 12.8 }, // 75% progress
							{ lat: 51.5420, lng: -0.0650, zoom: 12.8 } // End: Perfect Hackney view
						];
						
						// Preload tiles for each point using temp map
						pathPoints.forEach((point, index) => {
							setTimeout(() => {
								tempMap.setView([point.lat, point.lng], point.zoom);
								console.log(`Preloaded tiles for point ${index + 1}/5`);
							}, index * 300);
						});
						
						// Clean up temp map after preloading
						setTimeout(() => {
							tempMap.remove();
							document.body.removeChild(tempMapDiv);
							console.log('Preloading complete, temp map cleaned up');
						}, pathPoints.length * 300 + 1000);
					}
					
					// Start preloading immediately when website loads
					setTimeout(preloadScrollPath, 500);

					// Load and add Hackney boundary
					window.hackneyLayer = null;
					fetch('/hackney-boundary.json')
						.then(response => response.json())
						.then(data => {
							console.log('Loading Hackney boundary with', data.geometry.coordinates[0].length, 'points');
							window.hackneyLayer = L.geoJSON(data, {
								pane: 'hackneyPane',
								style: {
									color: '#98D8C8',
									fillColor: '#98D8C8',
									weight: 2,
									opacity: 0.9,
									fillOpacity: 0.6
								}
							}).addTo(map);
							console.log('Hackney boundary layer created');
						})
						.catch(error => console.error('Could not load Hackney boundary:', error));
					
					// Scroll-based map transition using normal window scrolling
					let isTransitioning = false;
					
					window.addEventListener('scroll', function() {
						if (isTransitioning) return; // Prevent overlapping transitions
						
						const scrollY = window.pageYOffset || document.documentElement.scrollTop;
						const maxScroll = Math.max(1, document.documentElement.scrollHeight - window.innerHeight);
						const scrollProgress = Math.min(scrollY / maxScroll, 1);
						
						// Start: Central London coordinates: [51.5074, -0.1278], zoom 12
						// End: Perfect Hackney view coordinates: [51.5420, -0.0650], zoom 12.8
						const startLat = 51.5074;
						const startLng = -0.1278;
						const startZoom = 12;
						
						const endLat = 51.5420;  // Perfect Hackney view latitude
						const endLng = -0.0650;  // Perfect Hackney view longitude
						const endZoom = 12.8;
						
						// Interpolate coordinates and zoom
						const currentLat = startLat + (endLat - startLat) * scrollProgress;
						const currentLng = startLng + (endLng - startLng) * scrollProgress;
						const currentZoom = startZoom + (endZoom - startZoom) * scrollProgress;
						
						// Use flyTo for smoother transitions
						isTransitioning = true;
						map.flyTo([currentLat, currentLng], currentZoom, {
							duration: 0.05, // Even shorter duration for responsiveness
							easeLinearity: 0.9 // More linear easing
						});
						
						// Reduce Hackney boundary opacity as we scroll down
						if (window.hackneyLayer) {
							// Start with high opacity (0.9/0.6) and decrease as we scroll
							const boundaryOpacity = Math.max(0.6, 0.9 - (scrollProgress * 0.3)); // Border: 0.9 -> 0.6
							const boundaryFillOpacity = Math.max(0.4, 0.6 - (scrollProgress * 0.2)); // Fill: 0.6 -> 0.4
							
							window.hackneyLayer.setStyle({
								color: '#98D8C8',
								fillColor: '#98D8C8',
								weight: 2,
								opacity: boundaryOpacity,
								fillOpacity: boundaryFillOpacity
							});
						}
						
						// Update progress blocks in 5% increments with centered percentage text
						const progressBlocks = document.querySelectorAll('.progress-block');
						const progressText = document.getElementById('progress-text');
						if (progressBlocks.length > 0 && progressText) {
							// Round to nearest 5% increment
							const rawPercentage = scrollProgress * 100;
							const blockPercentage = Math.floor(rawPercentage / 5) * 5;
							
							// Calculate how many blocks to fill (each block represents 5%)
							const blocksToFill = blockPercentage / 5;
							
							// Update blocks
							progressBlocks.forEach((block, index) => {
								if (index < blocksToFill) {
									block.classList.add('filled');
								} else {
									block.classList.remove('filled');
								}
							});
							
							progressText.textContent = `${blockPercentage}%`;
						}
						
						// Fade out original overlay
						const originalOverlay = document.querySelector('.map-overlay');
						
						if (originalOverlay) {
							// Fade out original overlay as we scroll (disappears by 50% scroll)
							originalOverlay.style.opacity = Math.max(0, 1 - (scrollProgress * 2));
						}
						
						// Reset transition flag
						setTimeout(() => {
							isTransitioning = false;
						}, 50);
					});
					
				} else {
					document.body.className = 'desktop';
					document.getElementById('desktop-message').style.display = 'block';
				}
			}

			// Load Leaflet script dynamically
			const script = document.createElement('script');
			script.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
			script.integrity = 'sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=';
			script.crossOrigin = '';
			script.onload = initializeApp;
			document.head.appendChild(script);
		</script>
	</body>
</html>
